# Limite de upload para grandes arquivos
client_max_body_size 100M;

# Upstreams
upstream frontend {
    server midara-frontend:3000;
}

upstream backend {
    server midara-backend:5000;
}

# Redireciona www para não-www (HTTP)
server {
    listen 80;
    server_name www.midara.ink;
    return 301 https://midara.ink$request_uri;
}

# Redireciona www para não-www (HTTPS)
server {
    listen 443 ssl;
    server_name www.midara.ink;

    ssl_certificate /etc/letsencrypt/live/midara.ink/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/midara.ink/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    return 301 https://midara.ink$request_uri;
}

# HTTP → HTTPS para domínio principal
server {
    listen 80;
    server_name midara.ink;

    location / {
        return 301 https://midara.ink$request_uri;
    }
}

# HTTPS principal
server {
    listen 443 ssl;
    server_name midara.ink;

    ssl_certificate /etc/letsencrypt/live/midara.ink/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/midara.ink/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    client_max_body_size 100M;

    location / {
        proxy_pass http://frontend;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /api/ {
        rewrite ^/api(/.*)$ $1 break;
        proxy_pass http://backend;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
